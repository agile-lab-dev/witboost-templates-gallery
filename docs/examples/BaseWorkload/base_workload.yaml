apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: workload-base-full-experience-template.1
  title: Base Workload
  description: Gives a starting point to define a Workload template
  tags:
    - workload
spec:
  owner: agilelab
  type: workload
  parameters:
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required. The name of the component.
          ui:field: EntityNamePicker
          default: Workload
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: Component fully qualified name
        description:
          title: Description
          type: string
          description: Help others understand what this Workload is for
          default: Workload that executes internal processes to ingest and transform data
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this component belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this component belongs to.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Automatically selected from the Data Product metadata. Data Product development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          description: A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: dataproduct
            relation: hasPart
        readsFrom:
          title: Reads from
          type: array
          default: []
          items:
            type: string
            ui:field: ReadsFromPicker
          description: This is filled only for DataPipeline workloads and it represents the list of output ports or external systems that is reading
        tags:
          title: Tags
          type: array
          description: Tags for the component.
          default: []
          items:
            type: string


    - title: Workload job details
      description: Example of the details a workload may have. Here we assume a job with drivers and executors
      properties:
        driverCores: 
          title: Driver Cores
          type: integer
          description: Number of Driver Cores (If specified must be a positive integer)
          default: 4
        driverMemory: 
          title: Driver Memory
          type: string
          description: Driver Memory
          default: 2g
          ui:field: RegexPicker
          validation:
            errorMessage: The memory specification should be an integer followed by a size unit suffix ("k", "m", "g" or "t")
            regularExpression: ^\d+[kmgt]$
        executorCores: 
          title: Executor Cores
          type: integer
          description: Number of Executor Cores (If specified must be a positive integer)
          default: 4
        executorMemory: 
          title: Executor Memory
          type: string
          description: Executor Memory
          default: 2g
          ui:field: RegexPicker
          validation:
            errorMessage: The memory specification should be an integer followed by a size unit suffix ("k", "m", "g" or "t")
            regularExpression: ^\d+[kmgt]$
        numExecutors: 
          title: Number of executors
          type: integer
          description: Number of executors (If specified must be a positive integer)
          default: 2

    - title: Workload job scheduling
      description: Example of the details a workload may have. Here we assume a job with scheduling
      properties:
        enableScheduling:
          type: boolean
          title: Enable scheduling
          default: false
      allOf:
        - if:
            properties:
              enableScheduling:
                const: true
          then:
            properties:
              cronExpression:
                title: Cron expression
                type: string
                description: "Cron expression (format: Min Hour DayOfMonth Month DayOfWeek)"
              startDate:
                title: Start Date
                type: string
                format: date-time
              endDate:
                title: End Date
                type: string
                format: date-time
            required:
              - cronExpression
              - startDate
              - endDate
          else:
            properties:
              {}

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: .
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          readsFrom: '${{ parameters.readsFrom }}'
          tags: '${{ parameters.tags }}'
          driverCores: '${{ parameters.driverCores }}'
          driverMemory: '${{ parameters.driverMemory }}'
          executorCores: '${{ parameters.executorCores }}'
          executorMemory: '${{ parameters.executorMemory }}'
          numExecutors: '${{ parameters.numExecutors }}'
          enableScheduling: '${{ parameters.enableScheduling }}'
          cronExpression: '${{ parameters.cronExpression }}'
          startDate: '${{ parameters.startDate | truncate(19, true, "Z") }}'
          endDate: '${{ parameters.endDate | truncate(19, true, "Z") }}'
          useCaseTemplateId: urn:dmb:utm:workload-base-full-experience-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:workload-tech-adapter:0
          useCaseTemplateVersion: 0.0.0
          displayName: '${{ parameters.displayName }}'
          destination: &destination 'gitlab.com?owner=<PUT-HERE-YOUR-GITLAB-WITBOOST-GROUP>%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          owner: '<PUT-HERE-YOUR-GITLAB-WITBOOST-GROUP>/${{ parameters.domain | replace(r/domain:| |-/, "") }}/${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}'
          repo: '${{ parameters.name.split(" ") | join("") | lower }}'



    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '${{ parameters.rootDirectory }}'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
